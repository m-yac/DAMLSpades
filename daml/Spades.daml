
daml 1.2
module Spades where

import DA.Action.State

-- The standard deck of cards

data Suit = S | C | H | D
  deriving (Eq, Show)

data Card = Card with
  value : Int
  suit  : Suit
    deriving (Eq)

-- use this function rather than the `Card` constructor when making cards
card : Int -> Suit -> Card
card v s | v >= 1 && v <= 13 = Card v s
         | otherwise = error "malformed card"

instance Show Card where
  show (Card v s) = show v <> " " <> show s

-- a standard 52-card deck
deck : [Card]
deck = card <$> [1..13] <*> [S,C,H,D]


-- Randomness and shuffling

bitshift : Int -> Int -> Int
bitshift x amt | amt >= 0  = x * 2^amt
               | otherwise = truncate (intToDecimal x / 2.0^amt)

-- source: Marsaglia, George 'Xorshift RNGs'
xorshift : Int -> Int
xorshift = doXorSh 17 . doXorSh (-7) . doXorSh 13
  where doXorSh shamt x = x ^ (bitshift x shamt)

type Random a = State Int a

-- returns a random integer in the given range [lo,hi)
randomInt : (Int,Int) -> Random Int
randomInt (lo,hi) = do
  modify xorshift -- advance the seed
  result <- get
  pure (lo + result % (hi - lo))

runWithSeed : Random a -> Int -> a
runWithSeed = evalState

-- randomly shuffles a list
shuffle : [a] -> Random [a]
shuffle [] = pure []
shuffle (x::xs) = do
  i <- randomInt (0, length xs)
  (ls,hs) <- splitAt i <$> (shuffle xs)
  pure (ls ++ [x] ++ hs)
