
daml 1.2
module Cards where

import DA.Action.State

-- The standard deck of cards

data Suit = S | C | H | D
  deriving (Eq, Ord, Show)

data Card = Card with
  suit  : Suit
  value : Int
    deriving (Eq, Ord)

-- constructor for `Card`s which insures values are in [1,13]
card : Suit -> Int -> Card
card s v | v >= 1 && v <= 13 = Card s v
         | otherwise = error "malformed card"

instance Show Card where
  show (Card s v) = show v <> " " <> show s

-- a standard 52-card deck
stdDeck : [Card]
stdDeck = card <$> [S,C,H,D] <*> [1..13]


-- Randomness and shuffling

-- terribly simple random number generator
randLCG : Int -> Int
randLCG x = (1103515245 * x + 12345) % (2 ^ 31)

-- xor : Int -> Int -> Int
-- xor _ _ = error "xor not implemented" -- oops...

-- bitshift : Int -> Int -> Int
-- bitshift x amt | amt >= 0  = x * 2^amt
--                | otherwise = truncate (intToDecimal x / 2.0^amt)

-- source: Marsaglia, George. 'Xorshift RNGs'
-- xorshift : Int -> Int
-- xorshift = doXorSh 17 . doXorSh (-7) . doXorSh 13
--   where doXorSh shamt x = xor x (bitshift x shamt)

type Random a = State Int a

-- returns a random integer in the given range [lo,hi]
randomInt : (Int,Int) -> Random Int
randomInt (lo,hi) | hi >= lo = do
  modify randLCG -- advance the seed
  result <- (/ 2^16) <$> get
  pure (lo + result % (hi + 1 - lo))
randomInt _ = error "randomInt: lo > hi"

runWithSeed : Random a -> Int -> a
runWithSeed = evalState

-- randomly shuffles a list
shuffle : [a] -> Random [a]
shuffle [] = pure []
shuffle (x::xs) = do
  i <- randomInt (0, length xs)
  (ls,hs) <- splitAt i <$> (shuffle xs)
  pure (ls ++ [x] ++ hs)